% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractors.R
\name{extractor-functions}
\alias{extractor-functions}
\alias{package_by}
\alias{package_with}
\alias{author_with}
\alias{author_of}
\alias{suggests}
\alias{imports}
\alias{depends}
\alias{linking_to}
\alias{enhances}
\alias{maintainer_of}
\alias{maintained_by}
\alias{email_of}
\alias{email_with}
\alias{description_of}
\alias{title_of}
\alias{license_of}
\alias{version_of}
\alias{release_date_of}
\alias{package_by.cranly_network}
\alias{package_with.cranly_network}
\alias{author_of.cranly_network}
\alias{author_with.cranly_network}
\alias{suggested_by.cranly_network}
\alias{suggesting.cranly_network}
\alias{imported_by.cranly_network}
\alias{importing.cranly_network}
\alias{dependency_of.cranly_network}
\alias{depending_on.cranly_network}
\alias{linked_by.cranly_network}
\alias{linking_to.cranly_network}
\alias{enhanced_by.cranly_network}
\alias{enhancing.cranly_network}
\alias{maintainer_of.cranly_network}
\alias{maintained_by.cranly_network}
\alias{email_of.cranly_network}
\alias{email_with.cranly_network}
\alias{description_of.cranly_network}
\alias{title_of.cranly_network}
\alias{license_of.cranly_network}
\alias{version_of.cranly_network}
\alias{release_date_of.cranly_network}
\title{Find packages, authors, maintainers, license, versions etc by authors, packages or names matching a specific string}
\usage{
\method{package_by}{cranly_network}(x, author = NULL, exact = FALSE,
  flat = TRUE)

\method{package_with}{cranly_network}(x, name = NULL, exact = FALSE,
  flat = TRUE)

\method{author_of}{cranly_network}(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{author_with}{cranly_network}(x, name = NULL, exact = FALSE,
  flat = TRUE)

suggested_by.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

suggesting.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

imported_by.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

importing.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

dependency_of.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

depending_on.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

linked_by.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{linking_to}{cranly_network}(x, package = NULL, exact = FALSE,
  flat = TRUE)

enhanced_by.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

enhancing.cranly_network(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{maintainer_of}{cranly_network}(x, package = NULL,
  exact = FALSE, flat = TRUE)

\method{maintained_by}{cranly_network}(x, author = NULL, exact = FALSE,
  flat = TRUE)

\method{email_of}{cranly_network}(x, author = NULL, exact = FALSE,
  flat = TRUE)

\method{email_with}{cranly_network}(x, name = NULL, exact = FALSE,
  flat = TRUE)

\method{description_of}{cranly_network}(x, package = NULL,
  exact = FALSE, flat = TRUE)

\method{title_of}{cranly_network}(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{license_of}{cranly_network}(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{version_of}{cranly_network}(x, package = NULL, exact = FALSE,
  flat = TRUE)

\method{release_date_of}{cranly_network}(x, package = NULL,
  exact = FALSE, flat = TRUE)
}
\arguments{
\item{x}{a  \code{\link{cranly_network}} object.}

\item{author}{a vector of character strings with the author names to be matched. If \code{Inf} all available authors in \code{x} are returned. If \code{NULL} (default) nothing is matched.}

\item{exact}{logical. Should we use exact matching? Default is \code{TRUE}.}

\item{flat}{if \code{TRUE} (default) then the result is an unnamed character vector. See Value for more details of what is returned.}

\item{name}{a vector of character strings with the names to be matched. If \code{Inf} all available names in \code{x} are returned. If \code{NULL} (default) nothing is matched.}

\item{package}{a vector of character strings with the package names to be matched. If \code{Inf} all available packages in \code{x} are returned. If \code{NULL} (default) nothing is matched.}
}
\value{
If \code{flat = TRUE} then the result of the extraction function is a
\code{data.frame}, which is the subset of \code{x$nodes} matching \code{author},
\code{name} or \code{package} (according to the value of \code{exact}). If \code{flat = FALSE} then the results is a vector.

When \code{flat = TRUE} any \code{\link{NA}}s are removed before the result is
returned.
}
\description{
Find packages, authors, maintainers, license, versions etc by authors, packages or names matching a specific string
}
\examples{
\donttest{
# Using a package directives network
cran_db <- clean_CRAN_db()
pkg_net <- build_network(cran_db, perspective = "package")
## Find all packages containing glm in their name
package_with(pkg_net, name = "glm")
## Find all authors of packages containing brglm in their name
author_of(pkg_net, package = "rglm", exact = FALSE)
## Find all packages with brglm in their name
package_with(pkg_net, name = "rglm", exact = FALSE)
## Find all authors of the package brglm2
author_of(pkg_net, package = "brglm2", exact = TRUE)
## Find all authors with Ioannis in their name
author_with(pkg_net, name = "Ioannis", exact = FALSE)
## Find all packages that package Rcpp suggests
suggests(pkg_net, package = "Rcpp", exact = TRUE)
## Find all packages that package Rcpp imports
imports(pkg_net, package = "Rcpp", exact = TRUE)
## Find all packages that package RcppArmadillo is linking to
linking_to(pkg_net, package = "RcppArmadillo", exact = TRUE)
## Find the release data of RcppArmadillo
release_date_of(pkg_net, package = "RcppArmadillo", exact = TRUE)
## Find the release data of all packages with "brglm" in their name
release_date_of(pkg_net, package = "brglm", exact = FALSE)
## More information about packages with "brglm" in their name
release_date_of(pkg_net, package = "brglm", exact = FALSE, flat = FALSE)[c("package", "version")]

## Using an author collaboration network
aut_net <- build_network(cran_db, perspective = "author")
## Find all packages containing glm in their name
package_with(aut_net, name = "glm")
## Find all authors of packages containing brglm in their name
author_of(aut_net, package = "rglm", exact = FALSE)
## Find all packages with brglm in their name
package_with(aut_net, name = "rglm", exact = FALSE)
## Find all authors of the package brglm2
author_of(aut_net, package = "brglm2", exact = TRUE)
## Find all authors with Ioannis in their name
author_with(aut_net, name = "Ioannis", exact = FALSE)
}


}
\seealso{
\code{\link{build_network.cranly_db}} \code{\link{subset.cranly_network}} \code{\link{plot.cranly_network}}
}
